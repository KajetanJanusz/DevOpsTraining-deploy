services:
  backend:
    container_name: backend
    restart: always
    build:
      context: .
      dockerfile: Dockerfile-backend
    image: backend:prod
    env_file: ./backend.env
    networks:
      - backend_network
      - frontend_network
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - static-files:/app/static
      - ./DevOpsTraining-backend:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    container_name: frontend
    restart: always
    build:
      context: .
      dockerfile: Dockerfile-frontend
    image: frontend:prod
    env_file: 
      - ./frontend.env
    networks:
      - frontend_network
    depends_on:
      backend:
        condition: service_healthy
    ports:
    - "3001:3000"
    volumes:
      - ./DevOpsTraining-frontend:/app

  db:
    container_name: database
    restart: always
    image: postgres:14
    volumes:
      - postgres-data:/var/lib/postgresql/data
    env_file: 
      - ./db.env
    networks:
      - backend_network
    ports:
      - "5433:5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  static-files:
    driver: local
  postgres-data:
    driver: local

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge